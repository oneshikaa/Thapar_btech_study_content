}
print(fib)
}
k<-as.integer((readline(prompt = "enter a number ")))
fibonacci <- function(n) {
fib <- c(0, 1)
# Handle cases where n is 1 or 2
if (n == 1) {
print(fib[1])
} else if (n == 2) {
print(fib)
}
# Calculate and store Fibonacci numbers from the 3rd term to the nth term
for (i in 3:n) {
next_term <- fib[i - 1] + fib[i - 2]
fib <- c(fib, next_term)
}
# Print the Fibonacci sequence up to the nth term
print(fib)
}
# Read an integer input from the user
k <- as.integer(readline(prompt = "Enter a number: "))
# Call the fibonacci function with the user input
fibonacci(k)
fibonacci<-function(n){
fib<-c(0,1)
if(n==1){
print(fib[1])
}else if(n==2){
print(fib)
}
for(i in 3:n){
next_term<-fib[i-1]+fib[i-2]
fib<-c(fib,next_term)
}
print(fib)
}
fibonacci(5)
add <- function(a, b) {
return(a + b)
}
subtract <- function(a, b) {
return(a - b)
}
multiply <- function(a, b) {
return(a * b)
}
divide <- function(a, b) {
if (b == 0) {
return("Error: Division by zero")
} else {
return(a / b)
}
}
while (TRUE) {
cat("Simple Calculator\n")
cat("1. Addition\n")
cat("2. Subtraction\n")
cat("3. Multiplication\n")
cat("4. Division\n")
cat("5. Exit\n")
choice <- as.numeric(readline("Enter your choice (1/2/3/4/5): "))
if (choice == 5) {
cat("Exiting the calculator. Goodbye!\n")
break
}
if (choice %in% c(1, 2, 3, 4)) {
num1 <- as.numeric(readline("Enter the first number: "))
num2 <- as.numeric(readline("Enter the second number: "))
if (choice == 1) {
result <- add(num1, num2)
cat("Result:", result, "\n")
} else if (choice == 2) {
result <- subtract(num1, num2)
cat("Result:", result, "\n")
} else if (choice == 3) {
result <- multiply(num1, num2)
cat("Result:", result, "\n")
} else if (choice == 4) {
result <- divide(num1, num2)
cat("Result:", result, "\n")
}
} else {
cat("Invalid choice. Please enter a valid option (1/2/3/4/5).\n")
}
}
x<-c(4,5,6,7)
y<-c(4,5,6,7)
plot(x,y,cex=1,pch=6,xlab="x-axis",ylab="y-axis",col="black")
x<-c(4,5,6,7)
pie(x,edges = 20,radius = 0.8,clockwise = FALSE)
x<-c(7,12,14,7)
barplot(x)
#1a
chest<-c(rep("gold_coins",20),rep("silver",30),rep("bronze",50))
sample(chest,10)
#1b
sample(c("success", "failure"), 10, replace = TRUE, prob = c(0.9, 0.1))
#2a
# Function to simulate the probability of a birthday match for a given n
simulate_birthday_probability <- function(n, num_simulations) {
# Initialize a counter to keep track of matches
match_count <- 0
# Run simulations
for (i in 1:num_simulations) {
# Generate n random birthdays (from 1 to 365)
birthdays <- sample(1:365, n, replace = TRUE)
# Check if there's a match
if (length(birthdays) != length(unique(birthdays))) {
match_count <- match_count + 1
}
}
# Calculate the probability of a match
probability <- match_count / num_simulations
return(probability)
}
# Set the number of simulations
num_simulations <- 10000
# Find the smallest n for which the probability of a match is greater than 0.5
smallest_n <- NULL
for (n in 2:365) {
probability <- simulate_birthday_probability(n, num_simulations)
if (probability > 0.5) {
smallest_n <- n
break
}
}
# Print the results
cat("Smallest n for which the probability of a match is greater than 0.5:", smallest_n, "\n")
#3
conditional_prob<-function(P_cloud,P_rain,P_cloud_rain){
P_rain_cloud<-P_cloud_rain*P_rain/P_cloud
return (P_rain_cloud)
}
P_cloud<-0.4
P_rain<-0.2
P_cloud_rain<-0.85
ans<-conditional_prob(P_cloud,P_rain,P_cloud_rain )
print(ans)
#4
# Load the Iris dataset
data(iris)
# (a) Print the first few rows of the dataset
head(iris)
# (b) Find the structure of the dataset
str(iris)
# (c) Find the range of sepal length
range_sepal_length <- range(iris$Sepal.Length)
cat("Range of Sepal Length:", range_sepal_length[1], "to", range_sepal_length[2], "\n")
# (d) Find the mean of sepal length
mean_sepal_length <- mean(iris$Sepal.Length)
cat("Mean Sepal Length:", mean_sepal_length, "\n")
# (e) Find the median of sepal length
median_sepal_length <- median(iris$Sepal.Length)
cat("Median Sepal Length:", median_sepal_length, "\n")
# (f) Find the first and third quartiles and the interquartile range for sepal length
quartiles_sepal_length <- quantile(iris$Sepal.Length, c(0.25, 0.75))
iqr_sepal_length <- diff(quartiles_sepal_length)
cat("First Quartile:", quartiles_sepal_length[1], "\n")
cat("Third Quartile:", quartiles_sepal_length[2], "\n")
cat("Interquartile Range:", iqr_sepal_length, "\n")
# (g) Find the standard deviation and variance of sepal length
std_dev_sepal_length <- sd(iris$Sepal.Length)
variance_sepal_length <- var(iris$Sepal.Length)
cat("Standard Deviation of Sepal Length:", std_dev_sepal_length, "\n")
cat("Variance of Sepal Length:", variance_sepal_length, "\n")
# (h) Repeat the above exercises for sepal.width, petal.length, and petal.width
# Sepal Width
range_sepal_width <- range(iris$Sepal.Width)
mean_sepal_width <- mean(iris$Sepal.Width)
median_sepal_width <- median(iris$Sepal.Width)
quartiles_sepal_width <- quantile(iris$Sepal.Width, c(0.25, 0.75))
iqr_sepal_width <- diff(quartiles_sepal_width)
std_dev_sepal_width <- sd(iris$Sepal.Width)
variance_sepal_width <- var(iris$Sepal.Width)
# Petal Length
range_petal_length <- range(iris$Petal.Length)
mean_petal_length <- mean(iris$Petal.Length)
median_petal_length <- median(iris$Petal.Length)
quartiles_petal_length <- quantile(iris$Petal.Length, c(0.25, 0.75))
iqr_petal_length <- diff(quartiles_petal_length)
std_dev_petal_length <- sd(iris$Petal.Length)
variance_petal_length <- var(iris$Petal.Length)
# Petal Width
range_petal_width <- range(iris$Petal.Width)
mean_petal_width <- mean(iris$Petal.Width)
median_petal_width <- median(iris$Petal.Width)
quartiles_petal_width <- quantile(iris$Petal.Width, c(0.25, 0.75))
iqr_petal_width <- diff(quartiles_petal_width)
std_dev_petal_width <- sd(iris$Petal.Width)
variance_petal_width <- var(iris$Petal.Width)
# (i) Use the built-in function summary on the dataset Iris
summary(iris)
#5
calculate_mode <- function(x) {
unique_values <- unique(x)
unique_counts <- table(x)
modes <- unique_values[unique_counts == max(unique_counts)]
return(modes)
}
data_vector <- c(2, 3, 4, 3, 5, 6, 4, 4, 7)
result <- calculate_mode(data_vector)
cat("Mode(s) of the dataset:", result, "\n")
#1a
chest<-c(rep("gold_coins",20),rep("silver",30),rep("bronze",50))
sample(chest,10)
#1b
sample(c("success", "failure"), 10, replace = TRUE, prob = c(0.9, 0.1))
#2a
# Function to simulate the probability of a birthday match for a given n
simulate_birthday_probability <- function(n, num_simulations) {
# Initialize a counter to keep track of matches
match_count <- 0
# Run simulations
for (i in 1:num_simulations) {
# Generate n random birthdays (from 1 to 365)
birthdays <- sample(1:365, n, replace = TRUE)
# Check if there's a match
if (length(birthdays) != length(unique(birthdays))) {
match_count <- match_count + 1
}
}
# Calculate the probability of a match
probability <- match_count / num_simulations
return(probability)
}
# Set the number of simulations
num_simulations <- 10000
# Find the smallest n for which the probability of a match is greater than 0.5
smallest_n <- NULL
for (n in 2:365) {
probability <- simulate_birthday_probability(n, num_simulations)
if (probability > 0.5) {
smallest_n <- n
break
}
}
# Print the results
cat("Smallest n for which the probability of a match is greater than 0.5:", smallest_n, "\n")
conditional_prob<-function(P_cloud,P_rain,P_cloud_rain){
P_rain_cloud<-P_cloud_rain*P_rain/P_cloud
return (P_rain_cloud)
}
P_cloud<-0.4
P_rain<-0.2
P_cloud_rain<-0.85
ans<-conditional_prob(P_cloud,P_rain,P_cloud_rain )
print(ans)
#4
# Load the Iris dataset
data(iris)
# (a) Print the first few rows of the dataset
head(iris)
# (b) Find the structure of the dataset
str(iris)
# (c) Find the range of sepal length
range_sepal_length <- range(iris$Sepal.Length)
cat("Range of Sepal Length:", range_sepal_length[1], "to", range_sepal_length[2], "\n")
# (d) Find the mean of sepal length
mean_sepal_length <- mean(iris$Sepal.Length)
cat("Mean Sepal Length:", mean_sepal_length, "\n")
# (e) Find the median of sepal length
median_sepal_length <- median(iris$Sepal.Length)
cat("Median Sepal Length:", median_sepal_length, "\n")
# (f) Find the first and third quartiles and the interquartile range for sepal length
quartiles_sepal_length <- quantile(iris$Sepal.Length, c(0.25, 0.75))
iqr_sepal_length <- diff(quartiles_sepal_length)
cat("First Quartile:", quartiles_sepal_length[1], "\n")
cat("Third Quartile:", quartiles_sepal_length[2], "\n")
cat("Interquartile Range:", iqr_sepal_length, "\n")
# (g) Find the standard deviation and variance of sepal length
std_dev_sepal_length <- sd(iris$Sepal.Length)
variance_sepal_length <- var(iris$Sepal.Length)
cat("Standard Deviation of Sepal Length:", std_dev_sepal_length, "\n")
cat("Variance of Sepal Length:", variance_sepal_length, "\n")
# (h) Repeat the above exercises for sepal.width, petal.length, and petal.width
# Sepal Width
range_sepal_width <- range(iris$Sepal.Width)
mean_sepal_width <- mean(iris$Sepal.Width)
median_sepal_width <- median(iris$Sepal.Width)
quartiles_sepal_width <- quantile(iris$Sepal.Width, c(0.25, 0.75))
iqr_sepal_width <- diff(quartiles_sepal_width)
std_dev_sepal_width <- sd(iris$Sepal.Width)
variance_sepal_width <- var(iris$Sepal.Width)
# Petal Length
range_petal_length <- range(iris$Petal.Length)
mean_petal_length <- mean(iris$Petal.Length)
median_petal_length <- median(iris$Petal.Length)
quartiles_petal_length <- quantile(iris$Petal.Length, c(0.25, 0.75))
iqr_petal_length <- diff(quartiles_petal_length)
std_dev_petal_length <- sd(iris$Petal.Length)
variance_petal_length <- var(iris$Petal.Length)
# Petal Width
range_petal_width <- range(iris$Petal.Width)
mean_petal_width <- mean(iris$Petal.Width)
median_petal_width <- median(iris$Petal.Width)
quartiles_petal_width <- quantile(iris$Petal.Width, c(0.25, 0.75))
iqr_petal_width <- diff(quartiles_petal_width)
std_dev_petal_width <- sd(iris$Petal.Width)
variance_petal_width <- var(iris$Petal.Width)
# (i) Use the built-in function summary on the dataset Iris
summary(iris)
calculate_mode <- function(x) {
unique_values <- unique(x)
unique_counts <- table(x)
modes <- unique_values[unique_counts == max(unique_counts)]
return(modes)
}
data_vector <- c(2, 3, 4, 3, 5, 6, 4, 4, 7)
result <- calculate_mode(data_vector)
cat("Mode(s) of the dataset:", result, "\n")
#Code for question 1
ans <- pbinom(9, size=12, prob=1/6) - pbinom(6, size=12, prob=1/6)
print(ans)
#Code for Question-2
ans = 1 - pnorm(84, mean=72, sd=15.2) #Solution One
ans = pnorm(84, mean=72, sd=15.2, lower.tail = F)
print(ans)
#Code for question-3
print(dpois(0, 5))
print(ppois(0, 5)) #Difference between ppois and dpois?
print(ppois(q = 50, lambda = 50) - ppois(q = 47, lambda = 50))
#Code for question 1
ans <- pbinom(9, size=12, prob=1/6) - pbinom(6, size=12, prob=1/6)
print(ans)
#Code for Question-2
ans = 1 - pnorm(84, mean=72, sd=15.2) #Solution One
ans = pnorm(84, mean=72, sd=15.2, lower.tail = F)
print(ans)
#Code for question-3
print(dpois(0, 5))
print(ppois(0, 5)) #Difference between ppois and dpois?
print(ppois(q = 50, lambda = 50) - ppois(q = 47,lambda = 50))
#Code for question-4
print(dhyper(3,m=17,n=233,k=5))
#Code for question-5
#plotting pmf
xx<-seq(0,31,1)
n<-31
p<-0.447
pmf_value<-numeric()
for(i in 1 : length(xx)){
pmf_value[i] = dbinom(xx[i],n,p)
}
plot(xx,pmf_value)
#plotting cdf
xx<-seq(0,31,1)
n<-31
p<-0.447
cdf_value<-numeric()
for(i in 1 : length(xx)){
cdf_value[i] = pbinom(xx[i],n,p)
}
plot(xx,cdf_value)
#mean,variance,sd
#q<-1-p
mn<-n*p
vr<-n*p*(1-p)
std<-sqrt(vr)
#plotting pmf
xx<-seq(0,31,1)
n<-31
p<-0.447
pmf_value<-numeric()
for(i in 1 : length(xx)){
pmf_value[i] = dbinom(xx[i],n,p)
}
plot(xx,pmf_value)
#plotting cdf
xx<-seq(0,31,1)
n<-31
p<-0.447
cdf_value<-numeric()
for(i in 1 : length(xx)){
cdf_value[i] = pbinom(xx[i],n,p)
}
plot(xx,cdf_value)
mn<-n*p
vr<-n*p*(1-p)
std<-sqrt(vr)
print(mn)
print()
#plotting pmf
xx<-seq(0,31,1)
n<-31
p<-0.447
pmf_value<-numeric()
for(i in 1 : length(xx)){
pmf_value[i] = dbinom(xx[i],n,p)
}
plot(xx,pmf_value)
#plotting cdf
xx<-seq(0,31,1)
n<-31
p<-0.447
cdf_value<-numeric()
for(i in 1 : length(xx)){
cdf_value[i] = pbinom(xx[i],n,p)
}
plot(xx,cdf_value)
#mean,variance,sd
#q<-1-p
mn<-n*p
vr<-n*p*(1-p)
std<-sqrt(vr)
print(mn)
print()
x<-as.integer(readline(prompt = "enter a number : "))
x<-c(4,5,6,7)
y<-c(4,5,6,7)
plot(x,y)
plot(x,y,cex=1,pch=6,xlab="x-axis",ylab="y-axis",col="black")
points(3:7, 4:8, col = "red", pch = 19, cex = 1.5)
x<-c(7,12,14,7)
barplot(x)
calculate_mode <- function(x) {
unique_values <- unique(x)
unique_counts <- table(x)
modes <- unique_values[unique_counts == max(unique_counts)]
return(modes)
}
data_vector <- c(2, 3, 4, 3, 5, 6, 4, 4, 7)
result <- calculate_mode(data_vector)
cat("Mode(s) of the dataset:", result, "\n")
ans<-pnorm(84,mean =72 ,sd=15.2,lower.tail = FALSE)
print(ans)
print(ppois(q = 50, lambda = 50) - ppois(q = 47, lambda = 50))
print(ppois(q = 50, lambda = 50) - ppois(q = 47,lambda=50))
ans<-ppois(50,50)-ppois(47,50)
print(ans)
?dhyper
print(dhyper(3,m=17,n=233,k=5))
print(dhyper(3,m=233,n=5,k=17))
f<-function(t){0.1*exp(-0.1*t)}
ans<-integrate(f,lower = 0,upper = Inf)
print(ans)
f<-function(t){t*0.1*exp(-0.1*t)}
ans<-integrate(f,lower = 0,upper = Inf)
print(ans)
f<-function(t){t*0.1*exp(-0.1*t)}
expval<-integrate(f,lower=0,upper=Inf)
print(expval)
print(expval$value)
x<-as.integer(readline(prompt = "enter x : "))
fy<-function(y){(3/4)*(1/4)**(sqrt(y)-1)}
proby<-fy(y)
exp<-sum(y*proby)
print(exp)
source("~/.active-rstudio-document")
source("C:/Users/vans9/OneDrive/Desktop/R LAB/lab4.R")
source("C:/Users/vans9/OneDrive/Desktop/R LAB/lab4.R")
source("~/.active-rstudio-document")
x <- 3
y <- x^2
fy <- function(y) {
if (y < 1) return(0)
return((3/4) * (1/4)^(sqrt(y) - 1))
}
proby <- fy(y)
exp <- sum(proby * y)
print(exp)
a<- 1 - punif(45, min = 0, max = 60,lower.tail = TRUE)
print(a)
b<- punif(30,min=0,max = 60) - punif(20, min=0, max = 60)
print(b)
lambda <- 1/2
# (a) Value of the density function at x = 3
density_at_3 <- dexp(3, rate = lambda)
cat("Density at x = 3:", density_at_3, "\n")
# (b) Plot the exponential probability distribution for 0 ≤ x ≤ 5
x_values <- seq(0, 5, by = 0.1)
pdf_values <- dexp(x_values, rate = lambda)
plot(x_values, pdf_values, type = "l", main = "Exponential Probability Density",
xlab = "x", ylab = "Probability Density")
# (b) Plot the exponential probability distribution for 0 ≤ x ≤ 5
x_values <- seq(0, 5, by = 1)
pdf_values <- dexp(x_values, rate = lambda)
plot(x_values, pdf_values, type = "l", main = "Exponential Probability Density",
xlab = "x", ylab = "Probability Density")
# (e) Simulate 1000 exponential random numbers with λ = 1⁄2
set.seed(123)  # Set a seed for reproducibility
simulated_data <- rexp(1000, rate = lambda)
hist(simulated_data, breaks = 30, main = "Simulated Exponential Data", xlab = "x", ylab = "Frequency")
(x + y)/30
f = function(x, y){
(x + y)/30
}
x = c(0:3)
y = c(0:2)
m1 = matrix(c(f(0, 0:2), f(1, 0:2), f(2, 0:2), f(3, 0:2)), nrow=4, ncol=3, byrow=TRUE)
print(m1)
sum(m1)
hx=apply(m1, 1, sum)
print(hx)
n <- 100
degrees_of_freedom <- c(2, 10, 25)
chi_square_2 <- rchisq(n, degrees_of_freedom[1])
chi_square_10 <- rchisq(n, degrees_of_freedom[2])
chi_square_25 <- rchisq(n, degrees_of_freedom[3])
par(mfrow = c(1, 3)) # Set up a 1x3 grid for the plots
hist(chi_square_2, main = "Chi-Square (df = 2)", xlab = "Random Values", col = "skyblue")
hist(chi_square_10, main = "Chi-Square (df = 10)", xlab = "Random Values", col =
"lightgreen")
hist(chi_square_25, main = "Chi-Square (df = 25)", xlab = "Random Values", col =
"salmon")
par(mfrow = c(1, 1))
x <- seq(-6, 6, length.out = 100)
t_dist_df1 <- dt(x, df = 1)
t_dist_df4 <- dt(x, df = 4)
t_dist_df10 <- dt(x, df = 10)
t_dist_df30 <- dt(x, df = 30)
plot(x, t_dist_df30, type = "l", col = "blue", lwd = 2, xlab = "x", ylab = "Density", main = "tDistribution Density (df = 30)")
